{
  "openapi": "3.0.3",
  "info": {
    "title": "MT5 Manager API",
    "description": "RESTful API for MetaTrader 5 Manager operations including user management, account operations, and trading data retrieval.\n\n## Authentication\nThis API requires Manager-level credentials for MT5 server access. Regular trader accounts will not work.\n\n## Rate Limiting\nAPI calls are subject to rate limiting to protect the MT5 server. Recommended maximum: 100 requests per minute.\n\n## Error Handling\nAll endpoints return standardized error responses with detailed error messages and HTTP status codes.\n\n## Getting Started\n1. Start the MT5WebAPI server\n2. Connect to your MT5 server using the `/api/connect` endpoint\n3. Use other endpoints to manage users and accounts\n\nFor detailed documentation and examples, visit: [Complete Documentation](docs/README.md)",
    "version": "1.0.0",
    "contact": {
      "name": "MT5 Manager API Support",
      "url": "https://github.com/your-repo/mt5-manager-api"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local development server"
    },
    {
      "url": "https://your-production-server.com",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Connection",
      "description": "Server connection management"
    },
    {
      "name": "Users",
      "description": "User information and management"
    },
    {
      "name": "Accounts",
      "description": "Account information and balance operations"
    },
    {
      "name": "Groups",
      "description": "User group management"
    },
    {
      "name": "Trading",
      "description": "Trading data and operations"
    },
    {
      "name": "System",
      "description": "System status and health checks"
    }
  ],
  "paths": {
    "/api/connect": {
      "post": {
        "tags": ["Connection"],
        "summary": "Connect to MT5 server",
        "description": "Establishes a connection to the MT5 server using Manager credentials. This must be called before using any other API endpoints.",
        "operationId": "connect",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectRequest"
              },
              "examples": {
                "demo_server": {
                  "summary": "Demo server connection",
                  "value": {
                    "server": "demo.mt5server.com:443",
                    "login": 12345,
                    "password": "your-manager-password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Connection successful",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {"$ref": "#/components/schemas/ApiResponse"},
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "message": {"type": "string", "example": "Connected successfully"},
                            "server": {"type": "string", "example": "demo.mt5server.com:443"},
                            "login": {"type": "integer", "format": "int64", "example": 12345}
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/ErrorResponse"}
              }
            }
          },
          "500": {
            "description": "Connection failed",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/ErrorResponse"}
              }
            }
          }
        }
      }
    },
    "/api/disconnect": {
      "post": {
        "tags": ["Connection"],
        "summary": "Disconnect from MT5 server",
        "description": "Closes the connection to the MT5 server and releases resources.",
        "operationId": "disconnect",
        "responses": {
          "200": {
            "description": "Disconnection successful",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {"$ref": "#/components/schemas/ApiResponse"},
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "message": {"type": "string", "example": "Disconnected successfully"}
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/status": {
      "get": {
        "tags": ["System"],
        "summary": "Get connection status",
        "description": "Returns the current connection status and server information.",
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "Status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {"$ref": "#/components/schemas/ApiResponse"},
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "connected": {"type": "boolean", "example": true},
                            "timestamp": {"type": "string", "format": "date-time", "example": "2024-01-15T10:30:00Z"}
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users (Enhanced Discovery)",
        "description": "Retrieves all users using an enhanced discovery system that:\n\n1. **Starts with your real groups** (guaranteed to work):\n   - real\\Executive\n   - real\\Vipin Zero 1000\n   - real\\NORMAL\n\n2. **Expands using smart login ID discovery**:\n   - Checks login ID ranges around known users (Â±50)\n   - Tries common login ID patterns (1-20, 1000-1020, etc.)\n   - Discovers users from additional groups\n\n3. **Returns comprehensive results**:\n   - All users from your real groups (guaranteed)\n   - Additional discovered users (bonus)\n   - Discovery statistics and analysis\n\nThis method is **reliable** (never fails completely) and **efficient** (no wasted API calls).",
        "operationId": "getAllUsers",
        "responses": {
          "200": {
            "description": "All users retrieved successfully with discovery statistics",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {"$ref": "#/components/schemas/ApiResponse"},
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "users": {
                              "type": "array",
                              "items": {"$ref": "#/components/schemas/UserInfo"}
                            },
                            "discovery_stats": {
                              "type": "object",
                              "properties": {
                                "total_users": {"type": "integer", "example": 1367},
                                "from_real_groups": {"type": "integer", "example": 1247},
                                "additional_discovered": {"type": "integer", "example": 120},
                                "groups_found": {"type": "integer", "example": 6},
                                "login_range": {"type": "string", "example": "1001 - 150847"},
                                "discovery_method": {"type": "string", "example": "Enhanced discovery using real groups + login ID patterns"}
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/ErrorResponse"}
              }
            }
          }
        }
      }
    },
    "/api/users/stats": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user discovery statistics",
        "description": "Returns detailed statistics about user discovery without returning the actual user data. This is useful for getting insights about your server's user distribution and discovery effectiveness.",
        "operationId": "getUserDiscoveryStats",
        "responses": {
          "200": {
            "description": "Discovery statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {"$ref": "#/components/schemas/ApiResponse"},
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "total_users": {"type": "integer", "example": 1367},
                            "from_real_groups": {"type": "integer", "example": 1247},
                            "additional_discovered": {"type": "integer", "example": 120},
                            "groups_found": {"type": "array", "items": {"type": "string"}},
                            "groups_count": {"type": "integer", "example": 6},
                            "discovery_method": {"type": "string"},
                            "group_breakdown": {"type": "array", "items": {"type": "object"}},
                            "activity_stats": {"type": "object"}
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{login}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user information",
        "description": "Retrieves detailed information about a specific user by their login ID. Includes personal information, registration details, and account settings.",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "login",
            "in": "path",
            "required": true,
            "description": "User login ID",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 67890
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {"$ref": "#/components/schemas/ApiResponse"},
                    {
                      "type": "object",
                      "properties": {
                        "data": {"$ref": "#/components/schemas/UserInfo"}
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid login format",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/ErrorResponse"}
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/ErrorResponse"}
              }
            }
          }
        }
      }
    },
    "/api/user/{login}/group": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user's group",
        "description": "Retrieves the group name that the specified user belongs to.",
        "operationId": "getUserGroup",
        "parameters": [
          {
            "name": "login",
            "in": "path",
            "required": true,
            "description": "User login ID",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 67890
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User group retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {"$ref": "#/components/schemas/ApiResponse"},
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "group": {"type": "string", "example": "demo"}
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{login}/deals": {
      "get": {
        "tags": ["Trading"],
        "summary": "Get user trading deals",
        "description": "Retrieves trading deals for a specific user within a date range. Returns up to 100 deals by default, sorted by date.",
        "operationId": "getUserDeals",
        "parameters": [
          {
            "name": "login",
            "in": "path",
            "required": true,
            "description": "User login ID",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 67890
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "description": "Start date for deals (default: 7 days ago)",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2024-01-01"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "description": "End date for deals (default: tomorrow)",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2024-01-15"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deals retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {"$ref": "#/components/schemas/ApiResponse"},
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "total": {"type": "integer", "example": 25},
                            "returned": {"type": "integer", "example": 25},
                            "deals": {
                              "type": "array",
                              "items": {"$ref": "#/components/schemas/Deal"}
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/account/{login}": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get account information",
        "description": "Retrieves detailed account information including balance, equity, margin, and profit/loss. Essential for risk management and account monitoring.",
        "operationId": "getAccount",
        "parameters": [
          {
            "name": "login",
            "in": "path",
            "required": true,
            "description": "User login ID",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 67890
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {"$ref": "#/components/schemas/ApiResponse"},
                    {
                      "type": "object",
                      "properties": {
                        "data": {"$ref": "#/components/schemas/AccountInfo"}
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/group/{groupName}/users": {
      "get": {
        "tags": ["Groups"],
        "summary": "Get users in group",
        "description": "Retrieves all users belonging to a specific group. Useful for group-based operations and analysis.",
        "operationId": "getUsersInGroup",
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "description": "Name of the user group",
            "schema": {
              "type": "string",
              "example": "demo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {"$ref": "#/components/schemas/ApiResponse"},
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {"$ref": "#/components/schemas/UserInfo"}
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/balance": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Perform balance operation",
        "description": "Performs a balance operation (deposit or withdrawal) on a user's account. Positive amounts are deposits, negative amounts are withdrawals.\n\n**Important**: This operation directly affects account balance. Use with caution.",
        "operationId": "performBalanceOperation",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/BalanceRequest"},
              "examples": {
                "deposit": {
                  "summary": "Deposit funds",
                  "value": {
                    "login": 67890,
                    "amount": 1000.0,
                    "comment": "Deposit via API",
                    "type": 2
                  }
                },
                "withdrawal": {
                  "summary": "Withdraw funds",
                  "value": {
                    "login": 67890,
                    "amount": -500.0,
                    "comment": "Withdrawal via API",
                    "type": 2
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Balance operation successful",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {"$ref": "#/components/schemas/ApiResponse"},
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "message": {"type": "string", "example": "Balance operation successful"},
                            "login": {"type": "integer", "format": "int64", "example": 67890},
                            "amount": {"type": "number", "format": "double", "example": 1000.0},
                            "comment": {"type": "string", "example": "Deposit via API"}
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/groups": {
      "get": {
        "tags": ["Groups"],
        "summary": "Get all groups",
        "description": "Retrieves all available groups from the MT5 server with comprehensive statistics and configuration details.",
        "operationId": "getAllGroups",
        "responses": {
          "200": {
            "description": "Groups retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {"$ref": "#/components/schemas/ApiResponse"},
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "groups": {
                              "type": "array",
                              "items": {"$ref": "#/components/schemas/GroupInfo"}
                            },
                            "summary": {
                              "type": "object",
                              "properties": {
                                "total_groups": {"type": "integer", "example": 15},
                                "real_groups": {"type": "integer", "example": 8},
                                "demo_groups": {"type": "integer", "example": 5},
                                "manager_groups": {"type": "integer", "example": 2},
                                "total_users": {"type": "integer", "example": 1250},
                                "groups_by_type": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "type": {"type": "string", "example": "real"},
                                      "count": {"type": "integer", "example": 8}
                                    }
                                  }
                                },
                                "last_update": {"type": "string", "format": "date-time"}
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {"$ref": "#/components/responses/UnauthorizedError"},
          "500": {"$ref": "#/components/responses/InternalServerError"}
        },
        "security": [{"ApiKeyAuth": []}]
      }
    },
    "/api/groups/{groupName}": {
      "get": {
        "tags": ["Groups"],
        "summary": "Get specific group details",
        "description": "Retrieves detailed information about a specific group including statistics and user data.",
        "operationId": "getGroup",
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "description": "Name of the group to retrieve",
            "schema": {"type": "string"},
            "examples": {
              "real_group": {"value": "real\\Executive", "summary": "Real trading group"},
              "demo_group": {"value": "demo\\VIP", "summary": "Demo group"},
              "manager_group": {"value": "managers\\administrators", "summary": "Manager group"}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {"$ref": "#/components/schemas/ApiResponse"},
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "group": {"$ref": "#/components/schemas/GroupInfo"},
                            "statistics": {
                              "type": "object",
                              "properties": {
                                "user_count": {"type": "integer", "example": 156},
                                "active_users": {"type": "integer", "example": 89},
                                "avg_leverage": {"type": "number", "example": 100.5},
                                "registration_range": {
                                  "type": "object",
                                  "properties": {
                                    "earliest": {"type": "string", "format": "date-time"},
                                    "latest": {"type": "string", "format": "date-time"}
                                  }
                                },
                                "countries": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "country": {"type": "string", "example": "United States"},
                                      "count": {"type": "integer", "example": 45}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Group not found",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/ApiResponse"},
                "example": {
                  "success": false,
                  "error": "Group 'nonexistent' not found",
                  "timestamp": "2024-01-15T10:30:00Z"
                }
              }
            }
          },
          "401": {"$ref": "#/components/responses/UnauthorizedError"},
          "500": {"$ref": "#/components/responses/InternalServerError"}
        },
        "security": [{"ApiKeyAuth": []}]
      },
      "put": {
        "tags": ["Groups"],
        "summary": "Update group configuration",
        "description": "Updates the configuration settings for a specific group. Only provided fields will be updated.",
        "operationId": "updateGroup",
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "description": "Name of the group to update",
            "schema": {"type": "string"},
            "examples": {
              "real_group": {"value": "real\\Executive", "summary": "Real trading group"},
              "demo_group": {"value": "demo\\VIP", "summary": "Demo group"}
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/GroupUpdateRequest"},
              "examples": {
                "leverage_update": {
                  "summary": "Update leverage and margin settings",
                  "value": {
                    "leverage": 200,
                    "margin_call": 70,
                    "margin_stop_out": 40,
                    "description": "Updated VIP group with higher leverage"
                  }
                },
                "commission_update": {
                  "summary": "Update commission settings",
                  "value": {
                    "commission": 5.0,
                    "commission_type": 0,
                    "description": "Reduced commission for VIP clients"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {"$ref": "#/components/schemas/ApiResponse"},
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "message": {"type": "string", "example": "Group updated successfully"},
                            "group_name": {"type": "string", "example": "real\\Executive"},
                            "updated_properties": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "object",
                                "properties": {
                                  "from": {"type": "string"},
                                  "to": {"type": "string"}
                                }
                              },
                              "example": {
                                "leverage": {"from": "100", "to": "200"},
                                "margin_call": {"from": "80", "to": "70"}
                              }
                            },
                            "timestamp": {"type": "string", "format": "date-time"}
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Group not found",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/ApiResponse"},
                "example": {
                  "success": false,
                  "error": "Group 'nonexistent' not found",
                  "timestamp": "2024-01-15T10:30:00Z"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/ApiResponse"},
                "example": {
                  "success": false,
                  "error": "Invalid request body",
                  "timestamp": "2024-01-15T10:30:00Z"
                }
              }
            }
          },
          "401": {"$ref": "#/components/responses/UnauthorizedError"},
          "500": {"$ref": "#/components/responses/InternalServerError"}
        },
        "security": [{"ApiKeyAuth": []}]
      }
    }
  },
  "components": {
    "schemas": {
      "ApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful",
            "example": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp of the response",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": ["success", "timestamp"]
      },
      "ErrorResponse": {
        "allOf": [
          {"$ref": "#/components/schemas/ApiResponse"},
          {
            "type": "object",
            "properties": {
              "success": {"type": "boolean", "example": false},
              "error": {
                "type": "string",
                "description": "Error message describing what went wrong",
                "example": "Invalid request parameters"
              }
            },
            "required": ["error"]
          }
        ]
      },
      "ConnectRequest": {
        "type": "object",
        "properties": {
          "server": {
            "type": "string",
            "description": "MT5 server address and port",
            "example": "demo.mt5server.com:443"
          },
          "login": {
            "type": "integer",
            "format": "int64",
            "description": "Manager login ID (not regular trader login)",
            "example": 12345
          },
          "password": {
            "type": "string",
            "description": "Manager password",
            "example": "your-manager-password",
            "format": "password"
          }
        },
        "required": ["server", "login", "password"]
      },
      "BalanceRequest": {
        "type": "object",
        "properties": {
          "login": {
            "type": "integer",
            "format": "int64",
            "description": "User login ID for the balance operation",
            "example": 67890
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount to add (positive) or subtract (negative)",
            "example": 1000.0
          },
          "comment": {
            "type": "string",
            "description": "Comment for the balance operation",
            "example": "API deposit",
            "maxLength": 255
          },
          "type": {
            "type": "integer",
            "format": "int32",
            "description": "Operation type (2 = balance operation)",
            "example": 2,
            "default": 2
          }
        },
        "required": ["login", "amount"]
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "login": {"type": "integer", "format": "int64", "example": 67890},
          "name": {"type": "string", "example": "John Doe"},
          "group": {"type": "string", "example": "demo"},
          "email": {"type": "string", "format": "email", "example": "john.doe@example.com"},
          "country": {"type": "string", "example": "United States"},
          "city": {"type": "string", "example": "New York"},
          "state": {"type": "string", "example": "NY"},
          "zipcode": {"type": "string", "example": "10001"},
          "address": {"type": "string", "example": "123 Main St"},
          "phone": {"type": "string", "example": "+1-555-123-4567"},
          "comment": {"type": "string", "example": "VIP client"},
          "registration": {"type": "string", "format": "date-time", "example": "2024-01-01T00:00:00Z"},
          "last_access": {"type": "string", "format": "date-time", "example": "2024-01-15T09:30:00Z"},
          "leverage": {"type": "integer", "format": "int32", "example": 100},
          "rights": {"type": "integer", "format": "int32", "example": 255}
        }
      },
      "AccountInfo": {
        "type": "object",
        "properties": {
          "login": {"type": "integer", "format": "int64", "example": 67890},
          "balance": {"type": "number", "format": "double", "example": 10000.0},
          "credit": {"type": "number", "format": "double", "example": 0.0},
          "margin": {"type": "number", "format": "double", "example": 500.0},
          "margin_free": {"type": "number", "format": "double", "example": 9500.0},
          "margin_level": {"type": "number", "format": "double", "example": 2000.0},
          "margin_so_call": {"type": "number", "format": "double", "example": 100.0},
          "margin_so_so": {"type": "number", "format": "double", "example": 50.0},
          "profit": {"type": "number", "format": "double", "example": 150.0},
          "storage": {"type": "number", "format": "double", "example": -5.0},
          "commission": {"type": "number", "format": "double", "example": -2.0},
          "floating": {"type": "number", "format": "double", "example": 150.0},
          "equity": {"type": "number", "format": "double", "example": 10150.0},
          "currency": {"type": "string", "example": "USD"},
          "currency_digits": {"type": "integer", "format": "int32", "example": 2}
        }
      },
      "Deal": {
        "type": "object",
        "properties": {
          "deal_id": {"type": "integer", "format": "int64", "example": 123456789},
          "login": {"type": "integer", "format": "int64", "example": 67890},
          "symbol": {"type": "string", "example": "EURUSD"},
          "action": {"type": "string", "example": "Buy", "enum": ["Buy", "Sell", "Balance", "Credit"]},
          "volume": {"type": "number", "format": "double", "example": 0.1},
          "price": {"type": "number", "format": "double", "example": 1.0950},
          "profit": {"type": "number", "format": "double", "example": 15.0},
          "commission": {"type": "number", "format": "double", "example": -0.5},
          "swap": {"type": "number", "format": "double", "example": 0.0},
          "time": {"type": "string", "format": "date-time", "example": "2024-01-15T10:30:00Z"},
          "comment": {"type": "string", "example": "Market order"}
        }
      },
      "GroupInfo": {
        "type": "object",
        "properties": {
          "name": {"type": "string", "example": "real\\Executive", "description": "Group name"},
          "description": {"type": "string", "example": "VIP trading group: real\\Executive", "description": "Group description"},
          "company": {"type": "string", "example": "MT5 Trading Company", "description": "Company name"},
          "currency": {"type": "string", "example": "USD", "description": "Group currency"},
          "leverage": {"type": "integer", "format": "int32", "example": 200, "description": "Default leverage"},
          "margin_call": {"type": "number", "format": "double", "example": 70.0, "description": "Margin call level (percentage)"},
          "margin_stop_out": {"type": "number", "format": "double", "example": 40.0, "description": "Stop out level (percentage)"},
          "commission": {"type": "number", "format": "double", "example": 0.0, "description": "Commission amount"},
          "commission_type": {"type": "integer", "format": "int32", "example": 0, "description": "Commission type (0=money, 1=pips, 2=percent)"},
          "rights": {"type": "integer", "format": "int32", "example": 67, "description": "User rights flags"},
          "is_demo": {"type": "boolean", "example": false, "description": "Whether this is a demo group"},
          "user_count": {"type": "integer", "format": "int32", "example": 156, "description": "Number of users in group"},
          "last_update": {"type": "string", "format": "date-time", "example": "2024-01-15T10:30:00Z", "description": "Last update timestamp"}
        },
        "required": ["name", "description", "currency", "leverage", "is_demo", "user_count"]
      },
      "GroupUpdateRequest": {
        "type": "object",
        "properties": {
          "description": {"type": "string", "example": "Updated VIP group description", "description": "Group description"},
          "company": {"type": "string", "example": "MT5 Trading Company", "description": "Company name"},
          "currency": {"type": "string", "example": "USD", "description": "Group currency"},
          "leverage": {"type": "integer", "format": "int32", "example": 200, "description": "Default leverage"},
          "deposit_min": {"type": "number", "format": "double", "example": 1000.0, "description": "Minimum deposit"},
          "deposit_max": {"type": "number", "format": "double", "example": 1000000.0, "description": "Maximum deposit"},
          "credit_limit": {"type": "number", "format": "double", "example": 0.0, "description": "Credit limit"},
          "margin_call": {"type": "number", "format": "double", "example": 70.0, "description": "Margin call level (percentage)"},
          "margin_stop_out": {"type": "number", "format": "double", "example": 40.0, "description": "Stop out level (percentage)"},
          "interest_rate": {"type": "number", "format": "double", "example": 0.0, "description": "Interest rate"},
          "commission": {"type": "number", "format": "double", "example": 5.0, "description": "Commission amount"},
          "commission_type": {"type": "integer", "format": "int32", "example": 0, "description": "Commission type (0=money, 1=pips, 2=percent)"},
          "agent_commission": {"type": "number", "format": "double", "example": 0.0, "description": "Agent commission"},
          "rights": {"type": "integer", "format": "int32", "example": 67, "description": "User rights flags"},
          "timeout": {"type": "integer", "format": "int32", "example": 60, "description": "Connection timeout in seconds"},
          "news_mode": {"type": "integer", "format": "int32", "example": 2, "description": "News mode (0=disabled, 1=headers, 2=full)"},
          "reports_mode": {"type": "integer", "format": "int32", "example": 1, "description": "Reports mode"},
          "email_from": {"type": "string", "format": "email", "example": "noreply@mt5trading.com", "description": "Email from address"},
          "support_page": {"type": "string", "format": "uri", "example": "https://support.mt5trading.com", "description": "Support page URL"},
          "support_email": {"type": "string", "format": "email", "example": "support@mt5trading.com", "description": "Support email"},
          "default_deposit": {"type": "number", "format": "double", "example": 10000.0, "description": "Default deposit amount"},
          "default_credit": {"type": "number", "format": "double", "example": 0.0, "description": "Default credit amount"}
        },
        "description": "Request body for updating group configuration. All fields are optional - only provided fields will be updated."
      }
    }
  }
}