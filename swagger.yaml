openapi: 3.0.3
info:
  title: MT5 Manager API
  description: |
    RESTful API for MetaTrader 5 Manager operations including user management, account operations, and trading data retrieval.
    
    ## Authentication
    This API requires Manager-level credentials for MT5 server access. Regular trader accounts will not work.
    
    ## Rate Limiting
    API calls are subject to rate limiting to protect the MT5 server. Recommended maximum: 100 requests per minute.
    
    ## Error Handling
    All endpoints return standardized error responses with detailed error messages and HTTP status codes.
    
    ## Getting Started
    1. Start the MT5WebAPI server
    2. Connect to your MT5 server using the `/api/connect` endpoint
    3. Use other endpoints to manage users and accounts
    
    For detailed documentation and examples, visit: [Complete Documentation](docs/README.md)
  version: 1.0.0
  contact:
    name: MT5 Manager API Support
    url: https://github.com/your-repo/mt5-manager-api
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://your-production-server.com
    description: Production server

tags:
  - name: Connection
    description: Server connection management
  - name: Users
    description: User information and management
  - name: Accounts
    description: Account information and balance operations
  - name: Groups
    description: User group management
  - name: Trading
    description: Trading data and operations
  - name: System
    description: System status and health checks

paths:
  /api/connect:
    post:
      tags:
        - Connection
      summary: Connect to MT5 server
      description: |
        Establishes a connection to the MT5 server using Manager credentials.
        This must be called before using any other API endpoints.
      operationId: connect
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectRequest'
            examples:
              demo_server:
                summary: Demo server connection
                value:
                  server: "demo.mt5server.com:443"
                  login: 12345
                  password: "your-manager-password"
              live_server:
                summary: Live server connection
                value:
                  server: "live.mt5server.com:443"
                  login: 67890
                  password: "your-manager-password"
      responses:
        '200':
          description: Connection successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            example: "Connected successfully"
                          server:
                            type: string
                            example: "demo.mt5server.com:443"
                          login:
                            type: integer
                            format: int64
                            example: 12345
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_server:
                  summary: Missing server
                  value:
                    success: false
                    error: "Server is required"
                    timestamp: "2024-01-15T10:30:00Z"
        '500':
          description: Connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                connection_failed:
                  summary: Connection failed
                  value:
                    success: false
                    error: "Failed to connect to MT5 server"
                    timestamp: "2024-01-15T10:30:00Z"

  /api/disconnect:
    post:
      tags:
        - Connection
      summary: Disconnect from MT5 server
      description: Closes the connection to the MT5 server and releases resources.
      operationId: disconnect
      responses:
        '200':
          description: Disconnection successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            example: "Disconnected successfully"
        '500':
          description: Disconnection error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/status:
    get:
      tags:
        - System
      summary: Get connection status
      description: Returns the current connection status and server information.
      operationId: getStatus
      responses:
        '200':
          description: Status retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          connected:
                            type: boolean
                            example: true
                          timestamp:
                            type: string
                            format: date-time
                            example: "2024-01-15T10:30:00Z"
        '500':
          description: Status check failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users:
    get:
      tags:
        - Users
      summary: Get all users
      description: |
        Retrieves all users from all groups on the MT5 server.
        This operation may take some time for servers with many users as it iterates through all groups.
        
        **Warning**: This endpoint can return a large amount of data. Consider using pagination or filtering in production environments.
      operationId: getAllUsers
      responses:
        '200':
          description: All users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserInfo'
              examples:
                all_users_response:
                  summary: Successful response with multiple users
                  value:
                    success: true
                    data:
                      - login: 67890
                        name: "John Doe"
                        group: "demo"
                        email: "john.doe@example.com"
                        country: "United States"
                        city: "New York"
                        registration: "2024-01-01T00:00:00Z"
                        last_access: "2024-01-15T09:30:00Z"
                        leverage: 100
                      - login: 67891
                        name: "Jane Smith"
                        group: "real"
                        email: "jane.smith@example.com"
                        country: "Canada"
                        city: "Toronto"
                        registration: "2024-01-02T00:00:00Z"
                        last_access: "2024-01-15T10:15:00Z"
                        leverage: 500
                    timestamp: "2024-01-15T10:30:00Z"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                server_error:
                  summary: Server error response
                  value:
                    success: false
                    error: "Failed to retrieve users from one or more groups"
                    timestamp: "2024-01-15T10:30:00Z"

  /api/users/real:
    get:
      tags:
        - Users
      summary: Get all real users
      description: |
        Retrieves all users from your server's specific real groups:
        - real\Executive
        - real\Vipin Zero 1000
        - real\NORMAL
        
        This endpoint is optimized for your server's group structure and will only query the groups that actually exist on your server.
      operationId: getAllRealUsers
      responses:
        '200':
          description: All real users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserInfo'
              examples:
                real_users_response:
                  summary: Successful response with real users
                  value:
                    success: true
                    data:
                      - login: 67890
                        name: "John Executive"
                        group: "real\\Executive"
                        email: "john@example.com"
                        country: "United States"
                        registration: "2024-01-01T00:00:00Z"
                        last_access: "2024-01-15T09:30:00Z"
                        leverage: 100
                      - login: 67891
                        name: "Jane Vipin"
                        group: "real\\Vipin Zero 1000"
                        email: "jane@example.com"
                        country: "Canada"
                        registration: "2024-01-02T00:00:00Z"
                        last_access: "2024-01-15T10:15:00Z"
                        leverage: 1000
                    timestamp: "2024-01-15T10:30:00Z"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/user/{login}:
    get:
      tags:
        - Users
      summary: Get user information
      description: |
        Retrieves detailed information about a specific user by their login ID.
        Includes personal information, registration details, and account settings.
      operationId: getUser
      parameters:
        - name: login
          in: path
          required: true
          description: User login ID
          schema:
            type: integer
            format: int64
            example: 67890
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserInfo'
        '400':
          description: Invalid login format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid login format"
                timestamp: "2024-01-15T10:30:00Z"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "User not found"
                timestamp: "2024-01-15T10:30:00Z"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/user/{login}/group:
    get:
      tags:
        - Users
      summary: Get user's group
      description: Retrieves the group name that the specified user belongs to.
      operationId: getUserGroup
      parameters:
        - name: login
          in: path
          required: true
          description: User login ID
          schema:
            type: integer
            format: int64
            example: 67890
      responses:
        '200':
          description: User group retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          group:
                            type: string
                            example: "demo"
        '400':
          description: Invalid login format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/user/{login}/deals:
    get:
      tags:
        - Trading
      summary: Get user trading deals
      description: |
        Retrieves trading deals for a specific user within a date range.
        Returns up to 100 deals by default, sorted by date.
      operationId: getUserDeals
      parameters:
        - name: login
          in: path
          required: true
          description: User login ID
          schema:
            type: integer
            format: int64
            example: 67890
        - name: from
          in: query
          required: false
          description: Start date for deals (default: 7 days ago)
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: to
          in: query
          required: false
          description: End date for deals (default: tomorrow)
          schema:
            type: string
            format: date
            example: "2024-01-15"
      responses:
        '200':
          description: User deals retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          total:
                            type: integer
                            description: Total number of deals found
                            example: 25
                          returned:
                            type: integer
                            description: Number of deals returned (max 100)
                            example: 25
                          deals:
                            type: array
                            items:
                              $ref: '#/components/schemas/Deal'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to retrieve deals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/account/{login}:
    get:
      tags:
        - Accounts
      summary: Get account information
      description: |
        Retrieves detailed account information including balance, equity, margin, and profit/loss.
        Essential for risk management and account monitoring.
      operationId: getAccount
      parameters:
        - name: login
          in: path
          required: true
          description: User login ID
          schema:
            type: integer
            format: int64
            example: 67890
      responses:
        '200':
          description: Account information retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AccountInfo'
        '400':
          description: Invalid login format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/group/{groupName}/users:
    get:
      tags:
        - Groups
      summary: Get users in group
      description: |
        Retrieves all users belonging to a specific group.
        Useful for group-based operations and analysis.
      operationId: getUsersInGroup
      parameters:
        - name: groupName
          in: path
          required: true
          description: Name of the user group
          schema:
            type: string
            example: "demo"
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserInfo'
        '400':
          description: Group name is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Group name is required"
                timestamp: "2024-01-15T10:30:00Z"
        '500':
          description: Failed to retrieve users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/balance:
    post:
      tags:
        - Accounts
      summary: Perform balance operation
      description: |
        Performs a balance operation (deposit or withdrawal) on a user's account.
        Positive amounts are deposits, negative amounts are withdrawals.
        
        **Important**: This operation directly affects account balance. Use with caution.
      operationId: performBalanceOperation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BalanceRequest'
            examples:
              deposit:
                summary: Deposit funds
                value:
                  login: 67890
                  amount: 1000.0
                  comment: "Deposit via API"
                  type: 2
              withdrawal:
                summary: Withdraw funds
                value:
                  login: 67890
                  amount: -500.0
                  comment: "Withdrawal via API"
                  type: 2
      responses:
        '200':
          description: Balance operation successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            example: "Balance operation successful"
                          login:
                            type: integer
                            format: int64
                            example: 67890
                          amount:
                            type: number
                            format: double
                            example: 1000.0
                          comment:
                            type: string
                            example: "Deposit via API"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Balance operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Balance operation failed"
                timestamp: "2024-01-15T10:30:00Z"

components:
  schemas:
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the request was successful
          example: true
        timestamp:
          type: string
          format: date-time
          description: ISO 8601 timestamp of the response
          example: "2024-01-15T10:30:00Z"
      required:
        - success
        - timestamp

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            success:
              type: boolean
              example: false
            error:
              type: string
              description: Error message describing what went wrong
              example: "Invalid request parameters"
          required:
            - error

    ConnectRequest:
      type: object
      properties:
        server:
          type: string
          description: MT5 server address and port
          example: "demo.mt5server.com:443"
        login:
          type: integer
          format: int64
          description: Manager login ID (not regular trader login)
          example: 12345
        password:
          type: string
          description: Manager password
          example: "your-manager-password"
          format: password
      required:
        - server
        - login
        - password

    BalanceRequest:
      type: object
      properties:
        login:
          type: integer
          format: int64
          description: User login ID for the balance operation
          example: 67890
        amount:
          type: number
          format: double
          description: Amount to add (positive) or subtract (negative)
          example: 1000.0
        comment:
          type: string
          description: Comment for the balance operation
          example: "API deposit"
          maxLength: 255
        type:
          type: integer
          format: int32
          description: Operation type (2 = balance operation)
          example: 2
          default: 2
      required:
        - login
        - amount

    UserInfo:
      type: object
      properties:
        login:
          type: integer
          format: int64
          description: User login ID
          example: 67890
        name:
          type: string
          description: User full name
          example: "John Doe"
        group:
          type: string
          description: User group name
          example: "demo"
        email:
          type: string
          format: email
          description: User email address
          example: "john.doe@example.com"
        country:
          type: string
          description: User country
          example: "United States"
        city:
          type: string
          description: User city
          example: "New York"
        state:
          type: string
          description: User state/province
          example: "NY"
        zipcode:
          type: string
          description: User ZIP/postal code
          example: "10001"
        address:
          type: string
          description: User address
          example: "123 Main St"
        phone:
          type: string
          description: User phone number
          example: "+1-555-123-4567"
        comment:
          type: string
          description: User comment/notes
          example: "VIP client"
        registration:
          type: string
          format: date-time
          description: Account registration timestamp
          example: "2024-01-01T00:00:00Z"
        last_access:
          type: string
          format: date-time
          description: Last access timestamp
          example: "2024-01-15T09:30:00Z"
        leverage:
          type: integer
          format: int32
          description: Account leverage (e.g., 100 for 1:100)
          example: 100
        rights:
          type: integer
          format: int32
          description: User rights bitmask
          example: 255

    AccountInfo:
      type: object
      properties:
        login:
          type: integer
          format: int64
          description: Account login ID
          example: 67890
        balance:
          type: number
          format: double
          description: Account balance
          example: 10000.0
        credit:
          type: number
          format: double
          description: Account credit
          example: 0.0
        margin:
          type: number
          format: double
          description: Used margin
          example: 500.0
        margin_free:
          type: number
          format: double
          description: Free margin
          example: 9500.0
        margin_level:
          type: number
          format: double
          description: Margin level percentage
          example: 2000.0
        margin_so_call:
          type: number
          format: double
          description: Margin call level
          example: 100.0
        margin_so_so:
          type: number
          format: double
          description: Stop out level
          example: 50.0
        profit:
          type: number
          format: double
          description: Current profit/loss
          example: 150.0
        storage:
          type: number
          format: double
          description: Storage (swap)
          example: -5.0
        commission:
          type: number
          format: double
          description: Commission
          example: -2.0
        floating:
          type: number
          format: double
          description: Floating profit/loss
          example: 150.0
        equity:
          type: number
          format: double
          description: Account equity
          example: 10150.0
        currency:
          type: string
          description: Account currency
          example: "USD"
        currency_digits:
          type: integer
          format: int32
          description: Currency decimal digits
          example: 2

    Deal:
      type: object
      properties:
        deal_id:
          type: integer
          format: int64
          description: Unique deal ID
          example: 123456789
        login:
          type: integer
          format: int64
          description: User login ID
          example: 67890
        symbol:
          type: string
          description: Trading symbol
          example: "EURUSD"
        action:
          type: string
          description: Deal action (Buy, Sell, etc.)
          example: "Buy"
          enum: ["Buy", "Sell", "Balance", "Credit"]
        volume:
          type: number
          format: double
          description: Deal volume in lots
          example: 0.1
        price:
          type: number
          format: double
          description: Deal price
          example: 1.0950
        profit:
          type: number
          format: double
          description: Deal profit/loss
          example: 15.0
        commission:
          type: number
          format: double
          description: Deal commission
          example: -0.5
        swap:
          type: number
          format: double
          description: Deal swap
          example: 0.0
        time:
          type: string
          format: date-time
          description: Deal execution time
          example: "2024-01-15T10:30:00Z"
        comment:
          type: string
          description: Deal comment
          example: "Market order"

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication (if implemented)

  examples:
    SuccessfulConnection:
      summary: Successful connection response
      value:
        success: true
        data:
          message: "Connected successfully"
          server: "demo.mt5server.com:443"
          login: 12345
        timestamp: "2024-01-15T10:30:00Z"

    UserInfoExample:
      summary: Complete user information
      value:
        success: true
        data:
          login: 67890
          name: "John Doe"
          group: "demo"
          email: "john.doe@example.com"
          country: "United States"
          city: "New York"
          state: "NY"
          zipcode: "10001"
          address: "123 Main St"
          phone: "+1-555-123-4567"
          comment: "VIP client"
          registration: "2024-01-01T00:00:00Z"
          last_access: "2024-01-15T09:30:00Z"
          leverage: 100
          rights: 255
        timestamp: "2024-01-15T10:30:00Z"

    AccountInfoExample:
      summary: Complete account information
      value:
        success: true
        data:
          login: 67890
          balance: 10000.0
          credit: 0.0
          margin: 500.0
          margin_free: 9500.0
          margin_level: 2000.0
          margin_so_call: 100.0
          margin_so_so: 50.0
          profit: 150.0
          storage: -5.0
          commission: -2.0
          floating: 150.0
          equity: 10150.0
          currency: "USD"
          currency_digits: 2
        timestamp: "2024-01-15T10:30:00Z"

# Security (if implemented)
# security:
#   - ApiKeyAuth: []